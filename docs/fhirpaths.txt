DomainResource (Element): children().count() > id.count()
DomainResource (Extension): extension.exists() != value.exists()
DomainResource (Narrative.div): htmlchecks()
DomainResource (Narrative.div): htmlchecks()
DomainResource (Narrative.div): htmlchecks()
DomainResource (Attachment): data.empty() or contentType.exists()
DomainResource (Quantity): code.empty() or system.exists()
DomainResource (Duration): (code or value.empty()) and (system.empty() or system = %ucum)
DomainResource (Distance): (code or value.empty()) and (system.empty() or system = %ucum)
DomainResource (Count): (code or value.empty()) and (system.empty() or system = %ucum) and (code.empty() or code = '1') and (value.empty() or value.toString().contains('.').not())
DomainResource (Money): (code or value.empty()) and (system.empty() or system = 'urn:iso:std:iso:4217')
DomainResource (Age): (code or value.empty()) and (system.empty() or system = %ucum) and (value.empty() or value.toString().contains('.').not())
DomainResource (Range): low.empty() or high.empty() or (low <= high)
DomainResource (Period): start.empty() or end.empty() or (start <= end)
DomainResource (Ratio): (numerator.empty() xor denominator.exists()) and (numerator.exists() or extension.exists())
DomainResource (Reference): reference.startsWith('#').not() or (reference.substring(1).trace('url') in %resource.contained.id.trace('ids'))
DomainResource (ContactPoint): value.empty() or system.exists()
DomainResource (Timing.repeat): duration.empty() or durationUnit.exists()
DomainResource (Timing.repeat): period.empty() or periodUnit.exists()
DomainResource (Timing.repeat): ((period or frequency) and when).not()
DomainResource (Timing.repeat): duration.exists() implies duration >= 0
DomainResource (Timing.repeat): period.exists() implies period >= 0
DomainResource (Timing.repeat): periodMax.empty() or period.exists()
DomainResource (Timing.repeat): durationMax.empty() or duration.exists()
DomainResource (Timing.repeat): countMax.empty() or count.exists()
DomainResource (Timing.repeat): offset.empty() or when.exists()
DomainResource (ElementDefinition): binding.empty() or type.code.empty() or type.select((code = 'code') or (code = 'Coding') or (code='CodeableConcept') or (code = 'Quantity') or (code = 'Extension') or (code = 'string') or (code = 'uri')).exists()
DomainResource (ElementDefinition.binding): valueSet.is(uri).not() or valueSet.as(uri).startsWith('http:') or valueSet.as(uri).startsWith('https') or valueSet.as(uri).startsWith('urn:')
DomainResource (ElementDefinition): type.select(code&profile&targetProfile).isDistinct()
DomainResource (ElementDefinition): constraint.select(key).isDistinct()
DomainResource (ElementDefinition): defaultValue.empty() or meaningWhenMissing.empty()
DomainResource (ElementDefinition): sliceName.empty() or sliceName.matches('^[a-zA-Z0-9\\-\\_]+$')
DomainResource (ElementDefinition.slicing): discriminator.exists() or description.exists()
DomainResource (ElementDefinition): min.empty() or max.empty() or (max = '*') or (min <= max.toInteger())
DomainResource (ElementDefinition.max): empty() or ($this = '*') or (toInteger() >= 0)
DomainResource (ElementDefinition.type): aggregation.empty() or (code = 'Reference')
DomainResource (ElementDefinition): contentReference.empty() or (type.empty() and defaultValue.empty() and fixed.empty() and pattern.empty() and example.empty() and minValue.empty() and maxValue.empty() and maxLength.empty() and binding.empty())
DomainResource (ElementDefinition): fixed.empty() or (type.count()  <= 1)
DomainResource (ElementDefinition): pattern.empty() or (type.count() <= 1)
DomainResource (ElementDefinition): pattern.empty() or fixed.empty()
DomainResource (ElementDefinition.binding): valueSet.exists() or description.exists()
DomainResource (DomainResource): contained.text.empty()
DomainResource (DomainResource): contained.contained.empty()
DomainResource (DomainResource): contained.where(('#'+id in %resource.descendants().reference).not()).empty()
DomainResource (DomainResource): contained.meta.versionId.empty() and contained.meta.lastUpdated.empty()
Parameters (Parameters.parameter): (part.exists() and value.empty() and resource.empty()) or (part.empty() and (value.exists() xor resource.exists()))
AllergyIntolerance (AllergyIntolerance): verificationStatus='entered-in-error' or clinicalStatus.exists()
AllergyIntolerance (AllergyIntolerance): verificationStatus!='entered-in-error' or clinicalStatus.empty()
CarePlan (CarePlan.activity): detail.empty() or reference.empty()
Condition (Condition.stage): summary.exists() or assessment.exists()
Condition (Condition.evidence): code.exists() or detail.exists()
CapabilityStatement (CapabilityStatement): rest.exists() or messaging.exists() or document.exists()
CapabilityStatement (CapabilityStatement.rest.resource): searchParam.select(name).isDistinct()
CapabilityStatement (CapabilityStatement): (description.count() + software.count() + implementation.count()) > 0
CapabilityStatement (CapabilityStatement.rest.resource.searchParam): chain.empty() or type = 'reference'
CapabilityStatement (CapabilityStatement): messaging.endpoint.empty() or kind = 'instance'
CapabilityStatement (CapabilityStatement): (software.empty() and implementation.empty()) or kind != 'requirements'
CapabilityStatement (CapabilityStatement): implementation.empty() or kind != 'capability'
CapabilityStatement (CapabilityStatement): document.select(profile.reference&mode).isDistinct()
CapabilityStatement (CapabilityStatement): rest.select(mode).isDistinct()
CapabilityStatement (CapabilityStatement.rest): resource.select(type).isDistinct()
Composition (Composition.section): text.exists() or entry.exists() or section.exists()
Composition (Composition.section): emptyReason.empty() or entry.empty()
ExpansionProfile (ExpansionProfile.designation.include.designation): language.exists() or use.exists()
ExpansionProfile (ExpansionProfile.designation.exclude.designation): language.exists() or use.exists()
FamilyMemberHistory (FamilyMemberHistory): age.empty() or born.empty()
FamilyMemberHistory (FamilyMemberHistory): age.exists() or estimatedAge.empty()
Group (Group): member.empty() or (actual = true)
Immunization (Immunization): (wasNotGiven = true).not() or (reaction.empty() and explanation.reason.empty())
Immunization (Immunization): (wasNotGiven = true) or explanation.reasonNotGiven.empty()
List (List): emptyReason.empty() or entry.empty()
List (List): mode = 'changes' or entry.deleted.empty()
Media (Media): height.empty() or type != 'audio'
Media (Media): width.empty() or type != 'audio'
Media (Media): frames.empty() or type = 'photo'
Media (Media): duration.empty() or type != 'photo'
MedicationAdministration (MedicationAdministration.dosage): dose.exists() or rate.exists()
MedicationAdministration (MedicationAdministration): reasonNotGiven.empty() or notGiven = true
MedicationAdministration (MedicationAdministration): reasonGiven.empty() or notGiven.empty() or notGiven = 'false'
MedicationDispense (MedicationDispense): whenHandedOver.empty() or whenPrepared.empty() or whenHandedOver >= whenPrepared
MedicationStatement (MedicationStatement): reasonNotTaken.empty() or notTaken='y'
NutritionRequest (NutritionRequest): oralDiet.exists() or supplement.exists() or enteralFormula.exists()
Observation (Observation.referenceRange): low.exists() or high.exists() or text.exists()
Observation (Observation): dataAbsentReason.empty() or value.empty()
Observation (Observation): value.empty() or code!=component.code
Organization (Organization): (identifier.count() + name.count()) > 0
Organization (Organization.address): where(use = 'home').empty()
Organization (Organization.telecom): where(use = 'home').empty()
Patient (Patient.contact): name.exists() or telecom.exists() or address.exists() or organization.exists()
Procedure (Procedure): reasonNotPerformed.empty() or notPerformed = true
DataElement (DataElement.element): base.empty()
DataElement (DataElement.element): slicing.empty()
Questionnaire (Questionnaire.item): (type='group' implies item.empty().not()) and (type.trace('type')='display' implies item.trace('item').empty())
Questionnaire (Questionnaire): descendants().linkId.isDistinct()
Questionnaire (Questionnaire.item): type!='display' or concept.empty()
Questionnaire (Questionnaire.item): option.empty() or options.empty()
Questionnaire (Questionnaire.item): (type ='choice' or type = 'open-choice') or (options.empty() and option.empty())
Questionnaire (Questionnaire.item): type!='display' or (required.empty() and repeats.empty())
Questionnaire (Questionnaire.item.enableWhen): hasAnswer.exists() xor answer.exists()
Questionnaire (Questionnaire.item): (type!='group' and type!='display') or initial.empty()
Questionnaire (Questionnaire.item): type!='display' or readOnly.empty()
Questionnaire (Questionnaire.item): (type in ('boolean' | 'decimal' | 'integer' | 'string' | 'text' | 'url')) or maxLength.empty()
RiskAssessment (RiskAssessment.prediction.probabilityRange): (low.empty() or ((low.code = '%') and (low.system = %ucum))) and (high.empty() or ((high.code = '%') and (high.system = %ucum)))
RiskAssessment (RiskAssessment.prediction): probability is decimal implies probability.as(decimal) <= 100
AuditEvent (AuditEvent.entity): name.empty() or query.empty()
ValueSet (ValueSet.compose.include): valueSet.exists() or system.exists()
ValueSet (ValueSet.compose.include): (concept.exists() or filter.exists()) implies system.exists()
ValueSet (ValueSet.compose.include): concept.empty() or filter.empty()
ValueSet (ValueSet): compose.exists() or expansion.exists()
ValueSet (ValueSet.expansion.contains): code.exists() or display.exists()
ValueSet (ValueSet.expansion.contains): code.exists() or abstract = true
ValueSet (ValueSet.expansion.contains): code.empty() or system.exists()
ConceptMap (ConceptMap.group.element.target): comments.exists() or equivalence.empty() or ((equivalence != 'narrower') and (equivalence != 'inexact'))
Appointment (Appointment.participant): type.exists() or actor.exists()
Appointment (Appointment): start.empty() xor end.exists()
Appointment (Appointment): (start.exists() and end.exists()) or (status in ('proposed' | 'cancelled'))
AppointmentResponse (AppointmentResponse): participantType.exists() or actor.exists()
NamingSystem (NamingSystem): kind != 'root' or uniqueId.type = 'uuid'
NamingSystem (NamingSystem): uniqueId.where(preferred = true).select(type).isDistinct()
NamingSystem (NamingSystem): replacedBy.empty() or status = 'retired'
OperationDefinition (OperationDefinition.parameter): type.exists() or part.exists()
OperationDefinition (OperationDefinition.parameter): searchType implies type = 'string'
Bundle (Bundle): total.empty() or (type = 'searchset') or (type = 'history')
Bundle (Bundle): entry.search.empty() or (type = 'searchset')
Bundle (Bundle): entry.request.empty() or type = 'batch' or type = 'transaction' or type = 'history'
Bundle (Bundle): entry.response.empty() or type = 'batch-response' or type = 'transaction-response'
Bundle (Bundle.entry): resource.exists() or request.exists() or response.exists()
Bundle (Bundle.entry): fullUrl.empty() xor resource.exists()
Bundle (Bundle): entry.where(fullUrl).select(fullUrl&resource.meta.versionId).isDistinct()
Bundle (Bundle.entry): fullUrl.contains('/_history/').not()
SearchParameter (SearchParameter): xpath.empty() or xpathUsage.exists()
StructureDefinition (StructureDefinition): snapshot.empty() or snapshot.element.first().path = type
StructureDefinition (StructureDefinition): snapshot.exists() implies (snapshot.element.base.exists() = baseDefinition.exists())
StructureDefinition (StructureDefinition): snapshot.element.all(id.exists()) and differential.element.all(id.exists())
StructureDefinition (StructureDefinition.snapshot): element.first().type.empty()
StructureDefinition (StructureDefinition): snapshot.element.id.trace('ids').isDistinct()
StructureDefinition (StructureDefinition): differential.element.id.trace('ids').isDistinct()
StructureDefinition (StructureDefinition): contextInvariant.exists() implies type = 'Extension'
StructureDefinition (StructureDefinition): kind = 'logical' or (differential.element.type.code.all(hasValue() implies matches('^[a-zA-Z0-9]+$')) and snapshot.element.type.code.all(hasValue() implies matches('^[a-zA-Z0-9]+$')))
StructureDefinition (StructureDefinition.differential): element.first().path.startsWith(%resource.type) and element.tail().all(path.startsWith(%resource.type&'.'))
StructureDefinition (StructureDefinition): derivation = 'constraint' or snapshot.element.select(path).isDistinct()
StructureDefinition (StructureDefinition.mapping): name.exists() or uri.exists()
StructureDefinition (StructureDefinition.snapshot): element.all(definition and min and max)
StructureDefinition (StructureDefinition): abstract = true or baseDefinition.exists()
StructureDefinition (StructureDefinition): type != 'Extension' or derivation = 'specialization' or (context.exists() and contextType.exists())
StructureDefinition (StructureDefinition): snapshot.exists() or differential.exists()
StructureDefinition (StructureDefinition): (derivation = 'constraint') or (kind = 'logical') or (url = 'http://hl7.org/fhir/StructureDefinition/'+id)
StructureDefinition (StructureDefinition.snapshot): element.first().path = %resource.type and element.tail().all(path.startsWith(%resource.type&'.'))
StructureDefinition (StructureDefinition): children().element.first().label.empty() and children().element.first().code.empty() and children().element.first().requirements.empty()
StructureDefinition (StructureDefinition.differential): element.first().path.contains('.').not() implies element.first().type.empty()
StructureMap (StructureMap.group.rule.target): element.exists() implies context.exists()
StructureMap (StructureMap.group.rule.target): context.exists() implies contextType.exists()
TestScript (TestScript.test.action.assert): compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())
TestScript (TestScript.setup.action.assert): (response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'
TestScript (TestScript.test.action.assert): (response.empty() and responseCode.empty() and direction = 'request') or direction.empty() or direction = 'response'
TestScript (TestScript.setup.action): operation.exists() xor assert.exists()
TestScript (TestScript.test.action): operation.exists() xor assert.exists()
TestScript (TestScript.variable): expression.empty() or headerField.empty() or path.empty()
TestScript (TestScript.metadata): capability.required.exists() or capability.validated.exists()
TestScript (TestScript.setup.action.assert): contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + resource.count() + responseCode.count() + response.count() + rule.count() + ruleset.count() + validateProfileId.count() <=1
TestScript (TestScript.test.action.assert): contentType.count() + expression.count() + headerField.count() + minimumId.count() + navigationLinks.count() + path.count() + resource.count() + responseCode.count() + response.count() + rule.count() + ruleset.count() + validateProfileId.count() <=1
TestScript (TestScript.setup.action.operation): sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' |'search' | 'transaction' | 'history'))
TestScript (TestScript.test.action.operation): sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))
TestScript (TestScript.teardown.action.operation): sourceId.exists() or (targetId.count() + url.count() + params.count() = 1) or (type.code in ('capabilities' | 'search' | 'transaction' | 'history'))
TestScript (TestScript.setup.action.assert): compareToSourceId.empty() xor (compareToSourceExpression.exists() or compareToSourcePath.exists())
TestReport (TestReport.setup.action): operation.exists() xor assert.exists()
TestReport (TestReport.test.action): operation.exists() xor assert.exists()
CodeSystem (CodeSystem): (concept.code | descendants().concept.code).isDistinct()
Task (Task): lastModified >= created
MessageDefinition (MessageDefinition.focus): max='*' or (max.toInteger() > 0)
SimpleQuantity (SimpleQuantity): comparator.empty()
